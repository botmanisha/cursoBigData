{"cells":[{"cell_type":"markdown","metadata":{"id":"2C0gHZxhzQO4"},"source":["# RDDs + Programación Funcional"]},{"cell_type":"markdown","metadata":{"id":"LVfG6M1yzQO8"},"source":["# Creamos un contexo para crear RDDs"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"YnfCdJB5zQO9","executionInfo":{"status":"ok","timestamp":1682634209180,"user_tz":-120,"elapsed":59542,"user":{"displayName":"manisha kumar","userId":"07229662764325286541"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"cf021f4c-5533-45d9-c2d9-a98cfbfdde70"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m310.8/310.8 MB\u001b[0m \u001b[31m3.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for pyspark (setup.py) ... \u001b[?25l\u001b[?25hdone\n"]}],"source":["import pandas as pd\n","!pip install pyspark --quiet\n","from pyspark import SparkContext\n","sc = SparkContext(master = \"local\", appName = \"Transformaciones sobre un RDD\") "]},{"cell_type":"markdown","metadata":{"id":"38_UH5CfzQO_"},"source":["# Cargamos un RDDs\n","\n","Para la realzación del ejercicio, con ayuda del archivo paises, realizaremos el equivalente de operaciones 'select','count','group by' y 'filter / where'\n","\n","Cambia el valor de la ruta para que apunte a la ruta donde tienes los datos"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"T-Mj3LYEzQO_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1682634431735,"user_tz":-120,"elapsed":222596,"user":{"displayName":"manisha kumar","userId":"07229662764325286541"}},"outputId":"6bf24ffe-6a6c-4733-aca5-4a21436e2ecb"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive/\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive/')\n","#LEER CSV\n","equiposOlimpicosRDD = sc.textFile(\"/content/drive/MyDrive/csv/paises.csv\").map(lambda line : line.split(\",\"))"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UnjhmZL9u1jz","executionInfo":{"status":"ok","timestamp":1682634435164,"user_tz":-120,"elapsed":3480,"user":{"displayName":"manisha kumar","userId":"07229662764325286541"}},"outputId":"c7c7747a-e80c-4b42-ac13-64ceb97fd05d"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","execution_count":4,"metadata":{"id":"a91H4XHUzQPA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1682634437952,"user_tz":-120,"elapsed":2804,"user":{"displayName":"manisha kumar","userId":"07229662764325286541"}},"outputId":"ec6ebb0b-2872-4a91-cdb3-635b1b9ae91a"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[['id', 'equipo', 'sigla'],\n"," ['1', '30. Februar', 'AUT'],\n"," ['2', 'A North American Team', 'MEX'],\n"," ['3', 'Acipactli', 'MEX'],\n"," ['4', 'Acturus', 'ARG'],\n"," ['5', 'Afghanistan', 'AFG'],\n"," ['6', 'Akatonbo', 'IRL'],\n"," ['7', 'Alain IV', 'SUI'],\n"," ['8', 'Albania', 'ALB'],\n"," ['9', 'Alcaid', 'POR']]"]},"metadata":{},"execution_count":4}],"source":["equiposOlimpicosRDD.take(10)"]},{"cell_type":"markdown","metadata":{"id":"mjPeYZk8DDjf"},"source":["### Deshacemos un RDD\n","\n","Con ayuda del método `collect()`, permite desparalelizar un RDD. \n"]},{"cell_type":"code","source":["equiposOlimpicosRDD.collect()"],"metadata":{"id":"jzY0aDY2Daz5"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Creamos un dataframe a partir de un RDD mediante `pd.DataFrame()` "],"metadata":{"id":"SAGUptZuDcx_"}},{"cell_type":"code","source":["pd.DataFrame(equiposOlimpicosRDD.collect()[1:], columns = equiposOlimpicosRDD.collect()[0] )"],"metadata":{"id":"Mio-IxZn1Qn5"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Operaciones sobre un RDDs\n","\n","Para la realzación del ejercicio, con ayuda del archivo paises, realizaremos el equivalente de operaciones `select`,`count`,`group by` , `filter` y `where`"],"metadata":{"id":"rYVavORU3Yx7"}},{"cell_type":"markdown","source":["### Ejercicio 1: \n","**Mostrar los países sin repetidos**\n","\n","*   Seleccionar la columna de las siglas PISTA: Usa un map y quedate con la columna con indice 2.\n","*   Usamos el `distinct()`\n","\n"],"metadata":{"id":"rHZH2AR_D1t_"}},{"cell_type":"code","source":["#Inserta aquí tu código\n","Paises_no_repetidos = equiposOlimpicosRDD.map(lambda fila: fila [2]).distinct()\n","Paises_no_repetidos.collect()"],"metadata":{"id":"YCrbVMte0Nzy"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wddQm8GvzQPA"},"source":["### Ejercicio 2\n","**Contar la cantidad de siglas diferentes de los equipos olímpicos existentes**\n","\n","PISTA: Puedes usar `count()`"]},{"cell_type":"code","execution_count":16,"metadata":{"id":"r37ow1TTzQPB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1682636985625,"user_tz":-120,"elapsed":968,"user":{"displayName":"manisha kumar","userId":"07229662764325286541"}},"outputId":"db509a5e-fdc6-4d63-885b-23e13cb497a0"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["231"]},"metadata":{},"execution_count":16}],"source":["#Inserta aquí tu código\n","Paises_no_repetidos = equiposOlimpicosRDD.map(lambda fila: fila [2]).distinct()\n","Paises_no_repetidos.count()"]},{"cell_type":"markdown","metadata":{"id":"NdBMwHo6zQPB"},"source":["### Ejercicio 3 (Díficil, puedes hacerlo el último)\n","**Agrupamos datos para poder determinar cuantos equipos posee un pais**\n","\n","Recuerda que los RDDs poseen una estructura de `clave-valor`, por lo cual debemos poner primero el valor 'clave' (la sigla del país).\n","\n","Con 'mapValues', al componente 'valor' le indicamos que operación deseamos que se le aplique.\n","\n","**Objetivo 1**: Tener un diccionario con `clave` la sigla del país y `valor` la lista de equipos de ese país\n","\n","Con `groupByKey` podemos agrupar por `clave`, en este caso por sigla del país  "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vxUqbKmyzQPC"},"outputs":[],"source":["#Inserta aquí tu código\n","equiposOlimpicosRDD.map(lambda x:(x[2], x[1])).groupByKey().mapValues(list).collect()"]},{"cell_type":"markdown","source":["**Objetivo 2**: Tener un diccionario con `clave` la sigla del país y `valor` la cantidad de equipos de ese país"],"metadata":{"id":"onaaHz_m7zsz"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"_4Ww2IdIzQPC"},"outputs":[],"source":["#Inserta aquí tu código\n","equiposOlimpicosRDD.map(lambda x:(x[2], x[1] )).groupByKey().mapValues(len).collect()"]},{"cell_type":"code","source":["gen = equiposOlimpicosRDD.map(lambda x:(x[2],x[1])).groupByKey().mapValues(list)\n","gen.map( lambda x :(x[0],len(x[1]))).collect()"],"metadata":{"id":"kNeJQwQmJafa"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yjdW-6BZzQPC"},"source":["### Operación filter para obtener un subconjunto\n","\n","Con el método 'filter', reducimos el conjuntos de equipos.\n","\n","Nos quedamos con la sigla equivalente de argentina"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KEQtaJwazQPC"},"outputs":[],"source":["equiposArgentinos = equiposOlimpicosRDD.filter(lambda l : \"ARG\" in l)\n","equiposArgentinos.collect()  "]},{"cell_type":"markdown","metadata":{"id":"yTKWJ6uuzQPD"},"source":["# Accciones sobre RDDs"]},{"cell_type":"code","execution_count":21,"metadata":{"id":"9oMfLYCFzQPD","executionInfo":{"status":"ok","timestamp":1682637286231,"user_tz":-120,"elapsed":920,"user":{"displayName":"manisha kumar","userId":"07229662764325286541"}}},"outputs":[],"source":["deportistaOlimpicoRDD = sc.textFile(\"/content/drive/MyDrive/csv/deportista.csv\").map(lambda line : line.split(\",\"))\n","deportistaOlimpico2RDD = sc.textFile(\"/content/drive/MyDrive/csv/deportista2.csv\").map(lambda line : line.split(\",\"))"]},{"cell_type":"code","execution_count":22,"metadata":{"id":"6b4nfMdPzQPD","executionInfo":{"status":"ok","timestamp":1682637291130,"user_tz":-120,"elapsed":1689,"user":{"displayName":"manisha kumar","userId":"07229662764325286541"}}},"outputs":[],"source":["deportistaOlimpicoRDD = deportistaOlimpicoRDD.union(deportistaOlimpico2RDD)"]},{"cell_type":"markdown","metadata":{"id":"wusBWOhIzQPD"},"source":["### Formas de visualizar datos de un RDDs\n","\n","La operación 'take' nos devuelve 'N' valores que encuentre spark.\n","\n","La operación 'top', previo ordena respecto al valor llave y nos devuelve 'N' valores.\n","\n","La operacion 'takeSample', nos devuelve una muestra aleatoria de los valores, Observa que recibe tres parametros\n","\n","| Orden | Argumento | Descripción | Valor\n","|-------|--------|-----|--------|\n","|1|withReplacement|Indica si la muetra podrá traer replicados|Bool|\n","|2| num| Cantidad de valores a retornar|int|\n","|3|seed|semilla para el generador aleatorio|int|"]},{"cell_type":"markdown","metadata":{"id":"HIL2jSanzQPD"},"source":["Nota: Si encuentras complicado leer el código en los segmentos donde usamos indices en las listas, ejecutalo por partes para que visualizes que componentes seleccionamos \n","\n","Nota: Para hacer join con RDDs, debemos tener selecionada la llave al inicio del RDD para poder realizar el cruce."]},{"cell_type":"code","execution_count":23,"metadata":{"id":"dujFUIR-zQPE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1682637360404,"user_tz":-120,"elapsed":5511,"user":{"displayName":"manisha kumar","userId":"07229662764325286541"}},"outputId":"b2f1df45-4212-42aa-a4e6-a6896c47e9d7"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[('199', (['1', 'A Dijiang', '1', '24', '180', '80'], 'CHN')),\n"," ('199', (['2', 'A Lamusi', '1', '23', '170', '60'], 'CHN')),\n"," ('199', (['602', 'Abudoureheman', '1', '22', '182', '75'], 'CHN')),\n"," ('199', (['1463', 'Ai Linuer', '1', '25', '160', '62'], 'CHN')),\n"," ('199', (['1464', 'Ai Yanhan', '2', '14', '168', '54'], 'CHN')),\n"," ('199', (['3605', 'An Weijiang', '1', '22', '178', '72'], 'CHN'))]"]},"metadata":{},"execution_count":23}],"source":["deportistaOlimpicoRDD.map(lambda x :[x[-1], x[:-1]]).join(equiposOlimpicosRDD \\\n","                        .map(lambda x : [x[0],x[2]])).take(6)"]},{"cell_type":"code","execution_count":24,"metadata":{"id":"egEvLY1kzQPE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1682637380689,"user_tz":-120,"elapsed":4907,"user":{"displayName":"manisha kumar","userId":"07229662764325286541"}},"outputId":"15c5f48a-9c36-488a-e0e0-80134ca81740"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[('999', (['92679', 'Trygve Bjarne Pedersen', '1', '35', '0', '0'], 'NOR')),\n"," ('999', (['1144', 'Henrik Agersborg', '1', '47', '0', '0'], 'NOR')),\n"," ('999', (['10765', 'Einar Berntsen', '1', '28', '0', '0'], 'NOR')),\n"," ('998',\n","  (['111659', 'G. Bernard Bernie Skinner', '1', '34', '182', '82'], 'CAN')),\n"," ('996', (['116030', 'Edward Eddy Stutterheim', '1', '39', '0', '0'], 'NED'))]"]},"metadata":{},"execution_count":24}],"source":["deportistaOlimpicoRDD.map(lambda x :[x[-1], x[:-1]]).join(equiposOlimpicosRDD \\\n","                        .map(lambda x : [x[0],x[2]])).top(5)"]},{"cell_type":"code","execution_count":25,"metadata":{"id":"oKfW9T8QzQPE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1682637385816,"user_tz":-120,"elapsed":5179,"user":{"displayName":"manisha kumar","userId":"07229662764325286541"}},"outputId":"5fedf921-c44f-40e0-d41b-07b08586f23c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[('93',\n","  (['76502', 'Yelena Viktorovna Matoshko', '2', '30', '177', '80'], 'BLR')),\n"," ('487', (['110997', 'Ajit Singh', '1', '23', '185', '73'], 'IND')),\n"," ('249',\n","  (['41654', 'Toms Pedro Gonzlez Barrios', '1', '21', '178', '75'], 'CUB')),\n"," ('259', (['7157', 'Jlius Bal', '1', '22', '0', '0'], 'TCH'))]"]},"metadata":{},"execution_count":25}],"source":["deportistaOlimpicoRDD.map(lambda x :[x[-1], x[:-1]]).join(equiposOlimpicosRDD \\\n","                        .map(lambda x : [x[0],x[2]])).takeSample(False,4,10)"]},{"cell_type":"markdown","metadata":{"id":"s1p9GbMXRKUh"},"source":["### Ejercicio 4\n","**Muestra 17 filas del RDD deportistaOlimpicoRDD**\n"]},{"cell_type":"code","execution_count":26,"metadata":{"id":"YGBkAiRSRKUi","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1682637402525,"user_tz":-120,"elapsed":1169,"user":{"displayName":"manisha kumar","userId":"07229662764325286541"}},"outputId":"aa3c2d97-175c-40d4-966f-20f319afaa9d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[['deportista_id', 'nombre', 'genero', 'edad', 'altura', 'peso', 'equipo_id'],\n"," ['1', 'A Dijiang', '1', '24', '180', '80', '199'],\n"," ['2', 'A Lamusi', '1', '23', '170', '60', '199'],\n"," ['3', 'Gunnar Nielsen Aaby', '1', '24', '0', '0', '273'],\n"," ['4', 'Edgar Lindenau Aabye', '1', '34', '0', '0', '278'],\n"," ['5', 'Christine Jacoba Aaftink', '2', '21', '185', '82', '705'],\n"," ['6', 'Per Knut Aaland', '1', '31', '188', '75', '1096'],\n"," ['7', 'John Aalberg', '1', '31', '183', '72', '1096'],\n"," ['8', 'Cornelia Cor Aalten Strannood ', '2', '18', '168', '0', '705'],\n"," ['9', 'Antti Sami Aalto', '1', '26', '186', '96', '350'],\n"," ['10', 'Einar Ferdinand Einari Aalto', '1', '26', '0', '0', '350'],\n"," ['11', 'Jorma Ilmari Aalto', '1', '22', '182', '76.5', '350'],\n"," ['12', 'Jyri Tapani Aalto', '1', '31', '172', '70', '350'],\n"," ['13', 'Minna Maarit Aalto', '2', '30', '159', '55.5', '350'],\n"," ['14', 'Pirjo Hannele Aalto Mattila ', '2', '32', '171', '65', '350'],\n"," ['15', 'Arvo Ossian Aaltonen', '1', '22', '0', '0', '350'],\n"," ['16', 'Juhamatti Tapio Aaltonen', '1', '28', '184', '85', '350']]"]},"metadata":{},"execution_count":26}],"source":["#Inserta aquí tu código\n","deportistaOlimpicoRDD.take(17)"]},{"cell_type":"markdown","metadata":{"id":"wKd3eGMmzQPE"},"source":["## Importancia de countAprox"]},{"cell_type":"markdown","metadata":{"id":"olmQehcQzQPF"},"source":["Debido a la cantidad de datos no siempre es recomendable hacer operaciones tipo count.\n","\n","Por lo que 'countAprox' es la solución mas viable cuando solo queremos darnos una idea de cuantos datos podemos leer durante un tiempo determinado. Nota: el parametro está en milisegundos"]},{"cell_type":"code","execution_count":27,"metadata":{"id":"ghA17-KfzQPF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1682637416839,"user_tz":-120,"elapsed":4274,"user":{"displayName":"manisha kumar","userId":"07229662764325286541"}},"outputId":"0fa468e0-e42b-4caa-f60e-4fd879dedab2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["135427"]},"metadata":{},"execution_count":27}],"source":["deportistaOlimpicoRDD.map(lambda x :[x[-1], x[:-1]]).join(equiposOlimpicosRDD \\\n","                            .map(lambda x : [x[0],x[2]])).count()"]},{"cell_type":"code","execution_count":28,"metadata":{"id":"ntbJX0mmzQPF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1682637422511,"user_tz":-120,"elapsed":3854,"user":{"displayName":"manisha kumar","userId":"07229662764325286541"}},"outputId":"ba8d5044-2183-4100-855d-073a28475e7c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["135427"]},"metadata":{},"execution_count":28}],"source":["deportistaOlimpicoRDD.map(lambda x :[x[-1], x[:-1]]).join(equiposOlimpicosRDD \\\n","                        .map(lambda x : [x[0],x[2]])).countApprox(20)"]},{"cell_type":"markdown","metadata":{"id":"qxyaA7XrzQPF"},"source":["# Acciones de modificacion"]},{"cell_type":"markdown","metadata":{"id":"QzWHfn79zQPF"},"source":["### Obtenemos el equipo y el deportista\n","\n","Guardamos el RDD resultante en equipoDeportista"]},{"cell_type":"code","execution_count":29,"metadata":{"id":"cuv7lqaSzQPF","executionInfo":{"status":"ok","timestamp":1682637434751,"user_tz":-120,"elapsed":370,"user":{"displayName":"manisha kumar","userId":"07229662764325286541"}}},"outputs":[],"source":["equipoDeportista = deportistaOlimpicoRDD.map(lambda x :[x[-1], x[:-1]]).join(equiposOlimpicosRDD \\\n","                                            .map(lambda x : [x[0],x[2]]))"]},{"cell_type":"code","execution_count":30,"metadata":{"id":"0ASUP1A_zQPG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1682637441732,"user_tz":-120,"elapsed":5380,"user":{"displayName":"manisha kumar","userId":"07229662764325286541"}},"outputId":"49d2d8cc-23b7-474d-beec-4b48183186de"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[('199', (['1', 'A Dijiang', '1', '24', '180', '80'], 'CHN'))]"]},"metadata":{},"execution_count":30}],"source":["equipoDeportista.take(1)\n"]},{"cell_type":"code","execution_count":31,"metadata":{"id":"YNBmieYBzQPG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1682637441735,"user_tz":-120,"elapsed":72,"user":{"displayName":"manisha kumar","userId":"07229662764325286541"}},"outputId":"5f759461-598b-42be-ee98-7fca4ea58f70"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["PythonRDD[106] at RDD at PythonRDD.scala:53"]},"metadata":{},"execution_count":31}],"source":["equipoDeportista.map(lambda x : (x[1][0][0],x[1][0][1:],x[1][1]) )"]},{"cell_type":"markdown","metadata":{"id":"2zxGrdbGzQPG"},"source":["### Carga de resultados\n","\n","Esta tabla posee las medallas que los jugadores han ganado"]},{"cell_type":"code","execution_count":32,"metadata":{"id":"JJIp94vWzQPG","executionInfo":{"status":"ok","timestamp":1682637575853,"user_tz":-120,"elapsed":432,"user":{"displayName":"manisha kumar","userId":"07229662764325286541"}}},"outputs":[],"source":["resultado = sc.textFile(\"/content/drive/MyDrive/csv/resultados.csv\").map(lambda line : line.split(\",\"))"]},{"cell_type":"markdown","metadata":{"id":"7AagekzDzQPG"},"source":["Eliminamos todas las medallas no ganadoras y nos quedamos con el valor de la medalla y  del deportista_id"]},{"cell_type":"code","execution_count":33,"metadata":{"id":"c-lpm6EVzQPH","executionInfo":{"status":"ok","timestamp":1682637581489,"user_tz":-120,"elapsed":797,"user":{"displayName":"manisha kumar","userId":"07229662764325286541"}}},"outputs":[],"source":["resultadoGanador = resultado.filter(lambda l : 'NA' not in l[1])\n","resultadoGanador = resultadoGanador.map(lambda l : [l[2],l[1]])"]},{"cell_type":"code","execution_count":34,"metadata":{"id":"Gbe00aAczQPH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1682637639461,"user_tz":-120,"elapsed":731,"user":{"displayName":"manisha kumar","userId":"07229662764325286541"}},"outputId":"b3bc0ee8-c713-4b4b-c93a-4effdd01fcde"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[['deportista_id', 'medalla'],\n"," ['4', 'Gold'],\n"," ['15', 'Bronze'],\n"," ['15', 'Bronze'],\n"," ['16', 'Bronze'],\n"," ['17', 'Bronze'],\n"," ['17', 'Gold'],\n"," ['17', 'Gold'],\n"," ['17', 'Gold'],\n"," ['17', 'Bronze'],\n"," ['20', 'Gold'],\n"," ['20', 'Bronze'],\n"," ['20', 'Silver'],\n"," ['20', 'Bronze'],\n"," ['20', 'Silver']]"]},"metadata":{},"execution_count":34}],"source":["resultadoGanador.take(15)"]},{"cell_type":"markdown","metadata":{"id":"_qSc4-5FzQPH"},"source":["### Obtenemos la relación buscada: deportista,pais y medalla."]},{"cell_type":"code","execution_count":35,"metadata":{"id":"CG3xGTK6zQPH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1682637651206,"user_tz":-120,"elapsed":6237,"user":{"displayName":"manisha kumar","userId":"07229662764325286541"}},"outputId":"bb0b0cbe-5a06-4f55-9eef-2627f575a9ce"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[('716',\n","  ((['553', 'John Charles Abrams', '1', '22', '183', '0'], 'NZL'), 'Gold'))]"]},"metadata":{},"execution_count":35}],"source":["jugadoresMedalla =  equipoDeportista.join(resultadoGanador)\n","jugadoresMedalla.take(1)"]},{"cell_type":"markdown","metadata":{"id":"a8WuSmepzQPI"},"source":["### Agrupamos las medallas respecto a la sigla del pais jugador"]},{"cell_type":"code","execution_count":36,"metadata":{"id":"lcUTb15DzQPJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1682637666873,"user_tz":-120,"elapsed":6622,"user":{"displayName":"manisha kumar","userId":"07229662764325286541"}},"outputId":"fca0750b-15f7-4733-83df-a101f1eef235"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[('NED', 7),\n"," ('ITA', 5),\n"," ('ITA', 4),\n"," ('ITA', 5),\n"," ('ITA', 4),\n"," ('ITA', 4),\n"," ('ITA', 4),\n"," ('ITA', 5),\n"," ('ITA', 4),\n"," ('JPN', 5)]"]},"metadata":{},"execution_count":36}],"source":["d = {'Gold':7, 'Silver':5, 'Bronze':4}\n","paisesMedallas = jugadoresMedalla.map(lambda x : (x[1][0][-1],d[x[1][1]]) )\n","paisesMedallas.takeSample(False,10)"]},{"cell_type":"markdown","metadata":{"id":"skE05DhPzQPK"},"source":["### Obtenemos los valores de los puntuajes históricos de los paises jugadores"]},{"cell_type":"code","execution_count":37,"metadata":{"id":"79MuLEmqzQPK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1682637685118,"user_tz":-120,"elapsed":3514,"user":{"displayName":"manisha kumar","userId":"07229662764325286541"}},"outputId":"b0d6159e-9e10-4ab8-cc80-fb61c7eeec72"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[('ITA', 74920),\n"," ('NED', 65560),\n"," ('GER', 22323),\n"," ('JPN', 19950),\n"," ('NZL', 9220),\n"," ('TCH', 8160),\n"," ('BLR', 5012),\n"," ('RSA', 4735),\n"," ('TUR', 3965),\n"," ('GHA', 3430)]"]},"metadata":{},"execution_count":37}],"source":["from operator import add\n","conclusion = paisesMedallas.reduceByKey((add)).sortBy(lambda x : x[1],ascending=False)\n","conclusion.take(10)"]},{"cell_type":"markdown","metadata":{"id":"na7avzcTzQPL"},"source":["# Estadística básica sobre los RDDs"]},{"cell_type":"markdown","metadata":{"id":"txvDoGPhzQPL"},"source":["Spark posee una suite integrada de forma natural para poder obtener estadísticas básicas."]},{"cell_type":"code","execution_count":38,"metadata":{"id":"TbTldbYHzQPL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1682637692098,"user_tz":-120,"elapsed":1551,"user":{"displayName":"manisha kumar","userId":"07229662764325286541"}},"outputId":"3bf5fe4e-bc26-46a5-f890-959ffc4c29c5"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(count: 65, mean: 3735.6153846153843, stdev: 12505.143665022015, max: 74920.0, min: 5.0)"]},"metadata":{},"execution_count":38}],"source":["conclusion.map(lambda l : l[1]).stats()"]},{"cell_type":"code","execution_count":39,"metadata":{"id":"jgmQCwq_zQPL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1682637693827,"user_tz":-120,"elapsed":1757,"user":{"displayName":"manisha kumar","userId":"07229662764325286541"}},"outputId":"1b18463b-5241-49ab-bb36-5a5e36892d78"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["3735.6153846153843"]},"metadata":{},"execution_count":39}],"source":["conclusion.map(lambda l : l [1]).mean()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8kobm9iHzQPL"},"outputs":[],"source":["conclusion.map(lambda l : l [1]).sum()"]},{"cell_type":"code","execution_count":41,"metadata":{"id":"6FOuFvAszQPM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1682637700598,"user_tz":-120,"elapsed":1046,"user":{"displayName":"manisha kumar","userId":"07229662764325286541"}},"outputId":"3d546876-7607-4fb3-e56a-7d2f9545289b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["([5.0,\n","  7496.5,\n","  14988.0,\n","  22479.5,\n","  29971.0,\n","  37462.5,\n","  44954.0,\n","  52445.5,\n","  59937.0,\n","  67428.5,\n","  74920],\n"," [59, 2, 2, 0, 0, 0, 0, 0, 1, 1])"]},"metadata":{},"execution_count":41}],"source":["conclusion.map(lambda l : l [1]).histogram(10)"]},{"cell_type":"markdown","source":["## Ejercicios Programación funcional"],"metadata":{"id":"wymqkE9zu61R"}},{"cell_type":"markdown","metadata":{"id":"BLMGps-pu2TZ"},"source":["### Ejercicio 5\n","**Escribir una función que aplique el IVA a un precio.**\n","* Nombre de la función: apply_iva\n","* Argumentos: precio, iva\n","* Resultado: precio con iva aplicado\n","\n","\n","* Prueba a llamar a la función\n"]},{"cell_type":"code","execution_count":81,"metadata":{"id":"mu6lIB0Fu2Ti","executionInfo":{"status":"ok","timestamp":1682639166777,"user_tz":-120,"elapsed":494,"user":{"displayName":"manisha kumar","userId":"07229662764325286541"}}},"outputs":[],"source":["#Inserta aquí tu código\n","precio = 0\n","iva = 21\n","def apply_iva(precio,iva):\n","  precio_total = precio + (precio * iva / 100)\n","  return precio_total\n","  print(precio_total)"]},{"cell_type":"code","source":["base_imponible = 100\n","iva = 21\n","precio_total= 121\n","formula  =(base_imponible * 21/100)+ base_imponible \n","print(formula)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KFET14UYCgGl","executionInfo":{"status":"ok","timestamp":1682639169068,"user_tz":-120,"elapsed":250,"user":{"displayName":"manisha kumar","userId":"07229662764325286541"}},"outputId":"19b30596-ab49-4b39-b245-956506d3a3f8"},"execution_count":82,"outputs":[{"output_type":"stream","name":"stdout","text":["121.0\n"]}]},{"cell_type":"code","source":["precio = 404\n","apply_iva(precio,iva)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ac8S9tEiCh2t","executionInfo":{"status":"ok","timestamp":1682639190782,"user_tz":-120,"elapsed":257,"user":{"displayName":"manisha kumar","userId":"07229662764325286541"}},"outputId":"9b799251-0bf7-4f69-d215-8340791442d9"},"execution_count":86,"outputs":[{"output_type":"execute_result","data":{"text/plain":["488.84000000000003"]},"metadata":{},"execution_count":86}]},{"cell_type":"code","source":["precio = 100\n","iva = 25\n","apply_iva(precio,iva)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AhdYDkYcDhjf","executionInfo":{"status":"ok","timestamp":1682639195966,"user_tz":-120,"elapsed":1149,"user":{"displayName":"manisha kumar","userId":"07229662764325286541"}},"outputId":"ca2b37a8-9ad4-481e-d3b8-0941200814fb"},"execution_count":87,"outputs":[{"output_type":"execute_result","data":{"text/plain":["125.0"]},"metadata":{},"execution_count":87}]},{"cell_type":"markdown","metadata":{"id":"cf_bBDqUvvrH"},"source":["### Ejercicio 6\n","** Escribe una función que aplica la función cuadrado() a todos los elementos de una lista.**\n","\n","    Parámetros:\n","        funcion: Recibe la función a aplicar.\n","        lista: Es una lista con valores que se pasarán como argumentos a funcion.\n","    Devuelve:\n","        Una lista con el resultado de aplicar la función a los valores de la lista."]},{"cell_type":"code","execution_count":90,"metadata":{"id":"4OLzIg3cvvrI","executionInfo":{"status":"ok","timestamp":1682639352902,"user_tz":-120,"elapsed":37,"user":{"displayName":"manisha kumar","userId":"07229662764325286541"}}},"outputs":[],"source":["#Inserta aquí tu código\n","def aplica_funcion_lista(funcion,lista):\n","  for numero in lista:\n","    new_numero = funcion(numero)\n","    print(new_numero)"]},{"cell_type":"code","source":["def cuadrado(numero):\n","    return numero * numero\n","\n","print(aplica_funcion_lista(cuadrado, [1, 2, 3, 4]))"],"metadata":{"id":"H7vUWifkwQkf","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1682639492389,"user_tz":-120,"elapsed":254,"user":{"displayName":"manisha kumar","userId":"07229662764325286541"}},"outputId":"0b426646-f308-4242-acea-5cf1519d9d21"},"execution_count":95,"outputs":[{"output_type":"stream","name":"stdout","text":["1\n","4\n","9\n","16\n","None\n"]}]},{"cell_type":"code","source":["cuadrado(44)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xpA9Hu0gH4ai","executionInfo":{"status":"ok","timestamp":1682639495488,"user_tz":-120,"elapsed":776,"user":{"displayName":"manisha kumar","userId":"07229662764325286541"}},"outputId":"2ddbb7e3-4ecb-4e5d-859e-3d8901cca516"},"execution_count":96,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1936"]},"metadata":{},"execution_count":96}]},{"cell_type":"markdown","metadata":{"id":"_1FP4aGdx4To"},"source":["### Ejercicio 7\n","**Detectar y corregir los errores del siguiente programa que aplica el iva a una factura:**\n"]},{"cell_type":"code","execution_count":98,"metadata":{"id":"V2TWrbVUx4Tp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1682639587366,"user_tz":-120,"elapsed":4542,"user":{"displayName":"manisha kumar","userId":"07229662764325286541"}},"outputId":"d4761093-3a3e-43ea-8a24-203c63beb446"},"outputs":[{"output_type":"stream","name":"stdout","text":["Introduce la base imponible de la factura: 62\n","1550.0\n"]}],"source":["base = float(input('Introduce la base imponible de la factura: '))\n","def aplica_iva(base, iva = 21):\n","    base = base * iva   \n","    return base \n","print(aplica_iva(base, iva))"]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"},"colab":{"provenance":[{"file_id":"13BFjTUF0thOTN5LAsqdjTairzQJj1o_c","timestamp":1682581817548},{"file_id":"https://github.com/terranigmark/curso-apache-spark-platzi/blob/master/3.%20Transformaciones%20y%20Acciones%20sobre%20RDDs.ipynb","timestamp":1672148243338}],"toc_visible":true}},"nbformat":4,"nbformat_minor":0}